import React, { useState } from 'react';
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { FaPoundSign } from "react-icons/fa";
import { DataTable } from "@/components/rate-calculator/data-table";
import { CalculatorRate, CalculatorRateColumns } from "@/components/rate-calculator/columns";
import OpenAI from 'openai';

const RateCalculator = () => {
    const [pickupPincode, setPickupPincode] = useState('');
    const [deliveryPincode, setDeliveryPincode] = useState('');
    const [actualWeight, setActualWeight] = useState('');
    const [shipmentValue, setShipmentValue] = useState('');
    const [dimensions, setDimensions] = useState({ width: '', height: '', length: '' });
    const [calculatedData, setCalculatedData] = useState<CalculatorRate[]>([]);
    const [loading, setLoading] = useState(false);

    const openai = new OpenAI({
        apiKey: "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",
        dangerouslyAllowBrowser: true,
    });

    const handleCalculate = async () => {
        setLoading(true);
        try {
            const response = await openai.chat.completions.create({
                model: "gpt-3.5-turbo",
                messages: [
                    {
                        role: "system",
                        content: "You are a helpful assistant that analyzes shipment data and returns it in a structured format."
                    },
                    {
                        role: "user",
                        content: `Analyze the following details: Pickup Pincode: ${pickupPincode}, Delivery Pincode: ${deliveryPincode}, Weight: ${actualWeight} KG, Shipment Value: ${shipmentValue}, Dimensions: Width: ${dimensions.width} CM, Height: ${dimensions.height} CM, Length: ${dimensions.length} CM. Provide the best courier options in the format: Courier, Rating, Estimated Delivery Date, Chargeable Weight, Shipment Rate.`
                    }
                ]
            });

            console.log('response', response);
            // Handle the response as plain text
            const responseText = response.choices[0].message.content;
            console.log('responseText', responseText);

            // Split the response text into lines (assuming it's comma-separated values as instructed in the prompt)
            //@ts-ignore
            const lines = responseText.split('\n');
            const parsedData: CalculatorRate[] = lines.map((line, index) => {
                const [courier, rating, estimated_delivery_date, chargeable_weight, shipment_rate] = line.split(',');

                return {
                    id: index + 1,
                    courier: courier ? courier : 'N/A',
                    rating: parseFloat(rating) || 0,
                    estimated_delivery_date: estimated_delivery_date ? new Date(estimated_delivery_date.trim()).toISOString() : new Date().toISOString(),
                    chargeable_weight: parseFloat(chargeable_weight) || 0,
                    shipment_rate: parseFloat(shipment_rate) || 0,
                    active: true,
                    created_at: new Date().toISOString(),
                };
            });

            setCalculatedData(parsedData);
        } catch (error) {
            console.error("Error analyzing shipment data:", error);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="w-full px-8 py-4 md:pl-[84px] bg-black bg-opacity-25 text-white sm:pl-[0px]">
            <h2 className="my-4 text-2xl font-bold">Shipping Rate Calculator</h2>
            <div className='flex flex-col w-full gap-3 lg:flex-row'>
                <div className="mt-4 flex lg:flex-row flex-col w-full lg:w-[70%] gap-4">
                    <div className="w-full lg:w-[50%]">
                        <div className='flex flex-col gap-3 my-4'>
                            <Label>Pickup Pincode</Label>
                            <input
                                value={pickupPincode}
                                onChange={(e) => setPickupPincode(e.target.value)}
                                placeholder='01241'
                                className='p-2 border rounded outline-none bg-none text-black'
                            />
                        </div>
                        <div className='flex flex-col gap-3 my-4'>
                            <Label>Delivery Pincode</Label>
                            <input
                                value={deliveryPincode}
                                onChange={(e) => setDeliveryPincode(e.target.value)}
                                placeholder='01241'
                                className='p-2 border rounded outline-none bg-none text-black'
                            />
                        </div>
                        <div className='flex flex-col gap-3'>
                            <Label>Actual Weight</Label>
                            <div className='flex items-center p-2 border bg-white border-gray-300 rounded'>
                                <input
                                    type='number'
                                    value={actualWeight}
                                    onChange={(e) => setActualWeight(e.target.value)}
                                    placeholder='Enter weight in KG'
                                    className='flex-grow outline-none bg-none text-black'
                                />
                                <p className='ml-2 text-black'>KG</p>
                            </div>

                            <div className='flex flex-col gap-3 mt-3'>
                                <Label>Shipment Value</Label>
                                <div className='flex items-center p-2 border bg-white border-gray-300 rounded'>
                                    <FaPoundSign className='mr-2 text-gray-400' />
                                    <input
                                        type='number'
                                        value={shipmentValue}
                                        onChange={(e) => setShipmentValue(e.target.value)}
                                        placeholder='Enter the shipment value'
                                        className='flex-grow outline-none bg-none text-black'
                                    />
                                </div>
                            </div>
                            <div className='flex flex-col my-4'>
                                <div className='flex gap-5 mt-4'>
                                    <Button onClick={handleCalculate} className='bg-primary-200 text-white w-[150px]'>
                                        {loading ? 'Calculating...' : 'Calculate'}
                                    </Button>
                                    <Button variant='outline' className='w-[150px] text-black' onClick={() => {
                                        setPickupPincode('');
                                        setDeliveryPincode('');
                                        setActualWeight('');
                                        setShipmentValue('');
                                        setDimensions({ width: '', height: '', length: '' });
                                        setCalculatedData([]);
                                    }}>
                                        Reset
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="flex flex-col w-full lg:w-[50%]">
                        <div className='flex flex-col gap-3'>
                            <Label>Dimensions</Label>
                            <div className='flex flex-wrap w-full gap-4'>
                                <div className='flex items-center p-2 bg-white border border-gray-300 rounded'>
                                    <input
                                        type='number'
                                        value={dimensions.width}
                                        onChange={(e) => setDimensions(prev => ({ ...prev, width: e.target.value }))}
                                        placeholder='W'
                                        className='flex-grow outline-none bg-none text-black'
                                    />
                                    <p className='ml-2 text-black'>CM</p>
                                </div>
                                <div className='flex items-center p-2 border bg-white border-gray-300 rounded'>
                                    <input
                                        type='number'
                                        value={dimensions.height}
                                        onChange={(e) => setDimensions(prev => ({ ...prev, height: e.target.value }))}
                                        placeholder='H'
                                        className='flex-grow outline-none bg-none text-black'
                                    />
                                    <p className='ml-2 text-black'>CM</p>
                                </div>
                                <div className='flex items-center p-2 border bg-white border-gray-300 rounded'>
                                    <input
                                        type='number'
                                        value={dimensions.length}
                                        onChange={(e) => setDimensions(prev => ({ ...prev, length: e.target.value }))}
                                        placeholder='L'
                                        className='flex-grow outline-none bg-none text-black'
                                    />
                                    <p className='ml-2 text-black'>CM</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div className='flex flex-col w-full gap-3 mt-4 lg:flex-row'>
                <div className='border w-full lg:w-[20%] px-4 rounded'>
                    <h2 className='my-4 text-xl font-bold'>Order Detail</h2>
                    <div className='flex flex-col'>
                        <h4 className='font-sm'>Pickup From</h4>
                        <h3 className='font-bold text-white'>{pickupPincode || 'N/A'}</h3>
                        <h3 className='font-bold text-white'>Central Delhi , Delhi</h3>
                    </div>
                    <div className='flex flex-col my-2'>
                        <h4 className='font-sm'>Delivery To</h4>
                        <h3 className='font-bold text-white'>{deliveryPincode || 'N/A'}</h3>
                        <h3 className='font-bold text-white'>Central Delhi , Delhi</h3>
                    </div>
                    <div className='flex flex-col my-2'>
                        <h4 className='font-sm'>Shipment Value</h4>
                        <h3 className='flex items-center gap-2 font-bold text-white'><FaPoundSign /> {shipmentValue || 'N/A'}</h3>
                    </div>
                    <div className='flex flex-col my-2'>
                        <h4 className='font-sm'>Payment Mode</h4>
                        <h3 className='font-bold text-white'>COD</h3>
                    </div>
                    <div className='flex flex-col my-2'>
                        <h4 className='font-sm'>Dangerous Goods</h4>
                        <h3 className='font-bold text-white'>No</h3>
                    </div>
                </div>
                <div className='w-ful lg:w-[80%] px-6 border rounded'>
                    <h3 className='my-3 text-2xl font-bold text-white'>Serviceable Courier Partner</h3>
                    <div className='flex items-center gap-2'>
                        <h3 className='text-base font-bold border-b-2 border-b-primary-200'>All</h3>
                    </div>
                    <DataTable columns={CalculatorRateColumns} data={calculatedData.length ? calculatedData : []} />
                </div>
            </div>
        </div>
    );
};

export default RateCalculator;
